#!/bin/bash

# Copyright 2015 onandoffables <on@onandoffables.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

board=0
chip=0
speed=0
option=0
style=0

if [ -f /etc/avrpi.cfg ]; then
	source /etc/avrpi.cfg
fi


apt_get_dependencies()
{
	sudo apt-get install -y libusb-1.0-0-dev libftdi-dev autoconf bison flex bc # compile avrdude
	sudo apt-get install -y avr-libc binutils-avr gcc-avr avra # avr-gcc and friends
	sudo apt-get install -y git-core make # ubuntu_armhf doesn't have these
	#sudo apt-get install -y gdb-avr simulavr # debugging
}

apt_get_tools()
{
	sudo apt-get install -y cmake minicom screen evtest # misc tools
}

apt_get_arduino()
{
	sudo apt-get install -y arduino # Arduino IDE
}

apt_get_everything()
{
	apt_get_dependencies
	apt_get_arduino
	apt_get_tools
}

install_avrdude_source()
{
	cd install/

	if [ ! -d avrdude-linuxgpio ]; then
		echo "avrdude-linuxgpio not found. Getting it..."
		git clone https://github.com/onandoffables/avrdude-linuxgpio || { echo "Error getting avrdude-linuxgpio"; exit 1; }
	fi

	cd avrdude-linuxgpio
	./install_avrdude.sh
	cd ..

	cd ..
}

install_avrdude_bin()
{
	cd install/

	cd avrdude-bin
	./install_avrdude_bin.sh
	cd ..

	cd ..
}

patch_arduino()
{
	firsttime=0

	# check if Arduino IDE is installed
	if [ ! -f /usr/share/arduino/hardware/arduino/programmers.txt ]; then
		echo "Arduino IDE probably not installed. Installing..."
		sudo apt-get install -y arduino
		firsttime=1
	fi

	cd install/

	if [ ! -d arduino-linuxgpio ]; then
		echo "arduino-linuxgpio not found. Getting it..."
		git clone https://github.com/onandoffables/arduino-linuxgpio || { echo "Error getting arduino-linuxgpio"; exit 1; }
	fi

	cd arduino-linuxgpio
	./patch_arduino.sh
	cd ..

	cd ..

	if [ ${firsttime} == 1 ]; then
		# avrdude overwritten by apt-get install arduino
		echo "### WARNING: Installing avrdude-linuxgpio again (arduino overwrote avrdude if it was already installed) ###"
		echo ""	
		install_avrdude_bin
	fi
}

no_blinky()
{
	echo ""
	echo "Something went wrong."
	echo " - did you select the correct chip/board?"
	echo " - is there anything else connected to MOSI/MISO/SCK? Disconnect that before trying again."
	echo ""
}

test_blinky()
{
	cd src/test/
	if [ ${chip} == "atmega168p" ]; then
		FAM=0 MCU=${chip} F_CPU=${speed} make flash || { make clean; no_blinky; exit 1; }
	elif [ ${chip} == "atmega328p" ]; then
		FAM=1 MCU=${chip} F_CPU=${speed} make flash || { make clean; no_blinky; exit 1; }
	elif [ ${chip} == "atmega32u4" ]; then
		FAM=4 MCU=${chip} F_CPU=${speed} make flash || { make clean; no_blinky; exit 1; }
	else
		echo "No blinky for you (unknown/unimplemented chip). Sorry."
		cd ../..
		exit 1
	fi

	if [ ${board} == "gertduino328" ]; then
		avrpi -r
	fi

	make clean
	cd ../..
	
	echo ""
	echo "Your red USR LED should blink now (0.5 seconds on, 0.5 seconds off)"
	echo " - If it blinks slower than that (for example 4 seconds on, 4 seconds off),"
	echo "   you probably forgot to set the fuses."
	echo " - If it blinks at any other rate, you probably selected the wrong clockspeed."
	if [ ${board} == "avrpi328" ]; then
		echo " - If it doesn't blink at all (it's off), you may need to add a jumper on the"
		echo "   SCK/LED pins (AVRPi-328 only)"
	fi
	exit
}

install_wiringpi()
{
	cd install/

	if [ -d wiringPi ]; then
		echo "wiringPi found. updating..."
		cd wiringPi
		git pull origin
		./build
		cd ..
	else
		echo "First time git clone: installing"
		git clone git://git.drogon.net/wiringPi
		cd wiringPi
		./build
		cd ..
	fi
	
	cd ..
}

uninstall_wiringpi()
{
	cd install/

	if [ -d wiringPi ]; then
		echo "wiringPi found. Uninstalling..."
		cd wiringPi
		./build uninstall
		cd ..
	else
		echo "No wiringPi source directory found."
	fi
	
	cd ..
}

install_dfu_programmer()
{
	cd install/

	if [ -d dfu-programmer ]; then
		echo "dfu-programmer found. updating..."
		cd dfu-programmer
		git pull origin
	else
		echo "First time git clone: installing"
		git clone https://github.com/dfu-programmer/dfu-programmer
		cd dfu-programmer
	fi
	
	./bootstrap.sh
	./configure
	make
	sudo make install
	cd .. #dfu-programmer

	cd .. #install
}

uninstall_avrpi()
{
	if [ -f /etc/avrpi.cfg.bak ]; then
		echo "/etc/avrpi.cfg.bak found. Removing..." >&2
		sudo rm /etc/avrpi.cfg.bak
	else
		echo "/etc/avrpi.cfg.bak not found. Skipping..." >&2
	fi

	if [ -f /etc/avrpi.cfg ]; then
		echo "/etc/avrpi.cfg found. Removing..." >&2
		sudo rm /etc/avrpi.cfg
	else
		echo "/etc/avrpi.cfg not found. Skipping..." >&2
	fi

	if [ -f /usr/local/bin/avrpi ]; then
		echo "/usr/local/bin/avrpi found. Removing..." >&2
		sudo rm /usr/local/bin/avrpi
	else
		echo "/usr/local/bin/avrpi not found. Skipping..." >&2
	fi

	board=0
	chip=0
	speed=0
}

install_avrpi()
{
	cd install/avrpi

	if [ -f /etc/avrpi.cfg ]; then
		echo "Old /etc/avrpi.cfg found. Overwriting..." >&2
		#sudo mv /etc/avrpi.cfg /etc/avrpi.cfg.bak
	else
		echo "/etc/avrpi.cfg not found. Installing avrpi default config..." >&2
	fi
	
	#local avrpi.cfg
	if [ -f avrpi.cfg ]; then
		#echo "Existing local config file found. Removing and creating new one..." >&2
		rm avrpi.cfg
	fi

	#board
	echo "#board can be avrpi168, avrpi328, avrpi32u4, gertboard328, gertduino48, gertduino328, raspioduino" >> avrpi.cfg
	echo "#PLEASE NOTE: this internal 'board' variable is not related to Arduino 'boards.txt' file." >> avrpi.cfg
	echo "board=${board}" >> avrpi.cfg
	echo "" >> avrpi.cfg
	
	#chip
	echo "#chip can be atmega168p, atmega328p, atmega32u4, atmega48p," >> avrpi.cfg
	echo "#attiny85, attiny2313, at90usb162, at90usb646" >> avrpi.cfg
	echo "chip=${chip}" >> avrpi.cfg
	echo "" >> avrpi.cfg
	
	#speed
	echo "#speed 8000000, 12000000, 16000000" >> avrpi.cfg
	echo "speed=${speed}" >> avrpi.cfg
	echo "" >> avrpi.cfg
	
	#programmer
	echo "#programmer linuxgpio, gpio" >> avrpi.cfg
	echo "programmer=linuxgpio" >> avrpi.cfg
	echo "" >> avrpi.cfg
	
	#port
	echo "#port /dev/ttyAMA0, /dev/ttyUSB0, /dev/ttyACM0" >> avrpi.cfg
	if [ ${chip} == "atmega32u4" ]; then
		echo "port=/dev/ttyACM0" >> avrpi.cfg
	else
		echo "port=/dev/ttyAMA0" >> avrpi.cfg
	fi
	echo "" >> avrpi.cfg
	
	#baud
	echo "#baud 9600, 38400, 57600, 115200 " >> avrpi.cfg
	echo "baud=9600" >> avrpi.cfg
	echo "" >> avrpi.cfg
	
	#delay
	echo "#delay 0, 5, 20 (isp clock delay)" >> avrpi.cfg
	echo "#anything other than 0 adds -i avrdude option" >> avrpi.cfg
	echo "delay=5" >> avrpi.cfg
	#echo "" >> avrpi.cfg
	
	echo "Copy new avrpi.cfg to /etc/avrpi.cfg" >&2
	sudo cp avrpi.cfg /etc/avrpi.cfg
	echo "Copy avrpi to /usr/local/bin/avrpi" >&2
	sudo cp avrpi /usr/local/bin/avrpi
	echo "Cleaning up local avrpi.cfg..." >&2
	rm avrpi.cfg
	
	avrpi -s
	
	cd ../..
}

install_arduino_mk()
{
	cd src/arduino-mk
	./bootstrap.sh
	cd ..
	
	echo ""
	echo "Usage:"
	echo "  cd src/arduino-mk"
	echo "  [edit board.mk]"
	echo "  cd projects/Blink"
	echo "  make ispload"
}

install_LUFA()
{
	cd src/
	./install_LUFA-AVRPI32U4.sh
	cd ..
	
	echo ""
	echo "Usage:"
	echo "  cd src/LUFA-AVRPI32U4/examples/Keyboard"
	echo "  make avrdude"
	echo "  lsusb # look for USB device ('Atmel Corp. LUFA *')"
}

install_everything()
{
	apt_get_everything
	patch_arduino
	install_avrdude_bin
#	install_wiringpi
#	install_avrpi
}

set_fuse()
{
	#from factory: (E:xx, H:xx, L:xx)
	avrdude -i16 -c linuxgpio -p $1 -U efuse:w:$2:m -U hfuse:w:$3:m -U lfuse:w:$4:m
}

burn_caterina()
{
	caterina=install/bootloader/caterina/bin/Caterina.hex
	avrdude -i16 -c linuxgpio -p atmega32u4 -U flash:w:${caterina}:i
}

burn_dfu()
{
	dfu=install/bootloader/atmel_dfu/ATMega32U4-usbdevice_dfu-1_0_0.hex
	avrdude -i16 -c linuxgpio -p atmega32u4 -U flash:w:${dfu}:i
}

no_option()
{
	echo "'$1' is not a valid option."
	exit
}

fuse_menu()
{
	banner

	echo "  Fuse settings:"

	if [ ${chip} == "atmega168p" ]; then
		echo "    c)    ATmega168p fuses (with crystal)"
	elif [ ${chip} == "atmega328p" ]; then
		echo "    a)    ATmega328p fuses (1 MHz, no crystal)"
		echo "    b)    ATmega328p fuses (8 MHz, no crystal)"
		echo "    c)    ATmega328p fuses (8-16 MHz with crystal)"
		echo "    d)    ATmega328p fuses (8-16 MHz with crystal + preserve EEPROM)"
	elif [ ${chip} == "atmega32u4" ]; then
		echo "    c)    ATmega32U4 fuses (with crystal. recommended)"
		echo "    d)    ATmega32U4 fuses (with crystal + HWB - bootstrap)"
		echo "    e)    ATmega32U4 fuses (with crystal + HWB - always run bootloader)"
	elif [ ${chip} == "atmega48p" ]; then
		echo "    c)    ATmega48p fuses (1 MHz, no crystal)"
		echo "    d)    ATmega48p fuses (8 MHz, no crystal)"
	else
		echo "    a)    ${chip} fuses (1 MHz, no crystal)"
		echo "    b)    ${chip} fuses (8 MHz, no crystal)"
		echo "    c)    ${chip} fuses (8-16 MHz with crystal)"
	fi

	echo ""
	echo "    q)    cancel"
	echo ""
	echo "Enter the fuse setting you want:"
	read fuse

	if [ -z ${fuse} ]; then
		return
	fi
	if [ ${fuse} == "q" ]; then
		return
	fi

	#set_fuse efuse hfuse lfuse
	if [ ${chip} == "atmega168p" ]; then
		#from factory: (E:01, H:DF, L:62)
		if [ ${fuse} == "c" ]; then
			set_fuse ${chip} 0x00 0xDF 0xE7
		else
			no_option $fuse
		fi
	elif [ ${chip} == "atmega328p" ]; then
		#from factory: (E:07, H:D9, L:62)
		if [ ${fuse} == "a" ]; then
			set_fuse ${chip} 0x07 0xD9 0x62
		elif [ ${fuse} == "b" ]; then
			set_fuse ${chip} 0x07 0xD9 0xE2
		elif [ ${fuse} == "c" ]; then
			set_fuse ${chip} 0x07 0xD9 0xE7
		elif [ ${fuse} == "d" ]; then
			set_fuse ${chip} 0x07 0xD1 0xE7
		else
			no_option $fuse
		fi
	elif [ ${chip} == "atmega32u4" ]; then
		#from factory: (E:03, H:99, L:5E)
		if [ ${fuse} == "c" ]; then
			set_fuse ${chip} 0xcb 0xd8 0xde
		elif [ ${fuse} == "d" ]; then
			# only reset to bootloader with avrpi -b
			# (or HWB pressed when AVR comes out of reset)
			set_fuse ${chip} 0xc3 0xd9 0xde
		elif [ ${fuse} == "e" ]; then
			# always reset to bootloader
			set_fuse ${chip} 0xc3 0xd8 0xde
		else
			no_option $fuse
		fi
	elif [ ${chip} == "atmega48p" ]; then
		#from factory: (E:FF, H:DF, L:62)
		if [ ${fuse} == "c" ]; then
			set_fuse ${chip} 0xFF 0xDF 0x62
		elif [ ${fuse} == "d" ]; then
			set_fuse ${chip} 0xFF 0xDF 0xE2
		else
			no_option $fuse
		fi

	elif [ ${chip} == "attiny85" ]; then
		echo "not implemented yet. Sorry."
		exit 1;
	elif [ ${chip} == "attiny2313" ]; then
		echo "not implemented yet. Sorry."
		exit 1;
	elif [ ${chip} == "at90usb162" ]; then
		echo "not implemented yet. Sorry."
		exit 1;
	elif [ ${chip} == "at90usb646" ]; then
		echo "not implemented yet. Sorry."
		exit 1;
	else
		echo "Unkown chip ('${chip}')."
		exit 1;
	fi
}

banner()
{
	#clear
	echo ""
	echo "#######################################################################"
	echo "#                          avrpi-tools                                #"
	echo "#######################################################################"
	echo ""
}

set_board()
{
	board=$1
	chip=$2
	speed=$3
}

custom_menu()
{
	banner

	echo "  Atmega168p"
	echo "    a)    ATmega168p @ 8MHz max. (no crystal)"
	echo "    b)    ATmega168p @ 20MHz max. (with crystal)"
	echo ""
	echo "  ATtiny"
	echo "    g)    ATtiny85 @ 8MHz max. (no crystal)"
	echo "    h)    ATtiny85 @ 20MHz max. (with crystal)"
	echo "    i)    ATtiny2313 @ 8MHz max. (no crystal)"
	echo "    j)    ATtiny2313 @ 20MHz max. (with crystal)"
	echo ""
	echo "  AT90USB"
	echo "    m)    AT90USB162 @ 8MHz max. (no crystal)"
	echo "    n)    AT90USB162 @ 20MHz max. (with crystal)"
	echo "    o)    AT90USB646 @ 8MHz max. (no crystal)"
	echo "    p)    AT90USB646 @ 20MHz max. (with crystal)"
	echo ""
	echo "    q)    back"
	echo ""

	echo "What board/chip do you have:"
	read boardnum
	
	if [ -z ${boardnum} ]; then
		exit
	fi
	if [ ${boardnum} == "q" ]; then
		return
	fi
	
	if [ ${boardnum} == "a" ]; then
		set_board "custom" "atmega168p" "8000000"
	elif [ ${boardnum} == "b" ]; then
		set_board "custom" "atmega168p" "8000000"

	elif [ ${boardnum} == "g" ]; then
		set_board "custom" "attiny85" "8000000"
	elif [ ${boardnum} == "h" ]; then
		set_board "custom" "attiny85" "8000000"
	elif [ ${boardnum} == "i" ]; then
		set_board "custom" "attiny2313" "8000000"
	elif [ ${boardnum} == "j" ]; then
		set_board "custom" "attiny2313" "8000000"

	elif [ ${boardnum} == "m" ]; then
		set_board "custom" "at90usb162" "8000000"
	elif [ ${boardnum} == "n" ]; then
		set_board "custom" "at90usb162" "8000000"
	elif [ ${boardnum} == "o" ]; then
		set_board "custom" "at90usb646" "8000000"
	elif [ ${boardnum} == "p" ]; then
		set_board "custom" "at90usb646" "8000000"
	else
		echo "Error. Please enter the number of the board."
		no_option ${boardnum}
	fi
}

board_menu()
{
	banner

#	echo "  AVRPi-168"
#	echo "    0)    ATmega168p no crystal @ 8MHz max."
#	echo "    1)    ATmega168p @ 8MHz"
#	echo "    2)    ATmega168p @ 12MHz"
#	echo "    3)    ATmega168p @ 16MHz"
#	echo ""
	echo "  AVRPi-328"
	echo "    a)    ATmega328p no crystal @ 8MHz max."
	echo "    b)    ATmega328p @ 8MHz"
	echo "    c)    ATmega328p @ 12MHz"
	echo "    d)    ATmega328p @ 16MHz (overclocked)"
	echo ""
	echo "  AVRPi-32U4"
	echo "    m)    ATmega32U4 @ 8 MHz"
	echo ""
	echo "  Others"
	echo "    u)    Gertboard (ATmega328p @ 12 MHz)"
#	echo "    v)    Gertduino (ATmega328p @ 16 MHz)"
#	echo "    w)    Gertduino48 (ATmega48p no crystal @ 8 MHz max.)"
	echo "    x)    RasPiO Duino (ATmega328p @ 12 MHz)"
	echo ""
	echo "  Custom chips"
	echo "    z)    ATmega, ATtiny, AT90USB"
	echo ""
	echo "    q)    back"
	echo ""

	echo "What board/chip do you have:"
	read boardnum
	
	if [ -z ${boardnum} ]; then
		exit
	fi
	if [ ${boardnum} == "q" ]; then
		return
	fi

	#set_board "board" "chip" "speed"
	if [ ${boardnum} == "a" ]; then
		set_board "avrpi328" "atmega328p" "1000000"
	elif [ ${boardnum} == "b" ]; then
		set_board "avrpi328" "atmega328p" "8000000"
	elif [ ${boardnum} == "c" ]; then
		set_board "avrpi328" "atmega328p" "12000000"
	elif [ ${boardnum} == "d" ]; then
		set_board "avrpi328" "atmega328p" "16000000"
	elif [ ${boardnum} == "m" ]; then
		set_board "avrpi32u4" "atmega32u4" "8000000"
	elif [ ${boardnum} == "u" ]; then
		set_board "gertboard328" "atmega328p" "12000000"
	elif [ ${boardnum} == "v" ]; then
		set_board "gertduino328" "atmega328p" "16000000"
	elif [ ${boardnum} == "w" ]; then
		set_board "gertduino48" "atmega48p" "8000000"
	elif [ ${boardnum} == "x" ]; then
		set_board "raspioduino" "atmega328p" "12000000"

	elif [ ${boardnum} == "z" ]; then
		custom_menu
	else
		echo "Error. Please enter the number of the board."
		no_option ${boardnum}
	fi
}

main_menu()
{
	echo "  Install everything in 1 easy step:"
	echo "    e)    Arduino IDE/libs + avrdude"
	echo ""
	echo "  Custom install:"
	echo "    a)    apt-get dependencies and AVR toolchain (without Arduino)"
	echo "    b)    install pre-compiled avrdude binary"
	echo "    c)    compile + install avrdude from source"
	echo "    p)    patch arduino"
	echo ""
	echo "  First time - fuses and test:"
	if [ ${board} == 0 ]; then
		echo "    s)    set board/chip/speed"
		echo "    f)    set fuses for your board"
	else
		echo "    s)    change to different board/chip"
		echo "    f)    set fuses for ${chip} on ${board} board"
	fi
	echo "    t)    make + upload test/blinky.hex"
	if [ ${board} == "avrpi32u4" ]; then
		echo "    o)    install Arduino Caterina bootloader"
		echo "    g)    install Atmel DFU bootloader"
	fi
	echo ""
	echo "  Optional extra:"
	if [ -f /usr/local/bin/gpio ]; then
		echo "    x)    uninstall wiringPi"
	else
		echo "    w)    install wiringPi"
	fi
	if [ -f /usr/local/bin/avrpi ]; then
		echo "    u)    uninstall avrpi tool"
	else
		echo "    v)    install avrpi tool (save board settings)"
	fi
	if [ ${board} == "avrpi32u4" ]; then
		echo "    d)    install dfu-programmer"
	fi
	echo ""
	echo "  Software and projects:"
	echo "    m)    install Arduino-Makefile"
	if [ ${board} == "avrpi32u4" ]; then
		echo "    l)    install LUFA-AVRPI32U4"
	fi
	echo ""
	echo "    q)    quit"
	echo ""
}

while [ ${option} != "q" ]; do

	banner
	#echo "  chip:  ${chip}"
	#echo "  speed: ${speed}"
	#echo ""
	main_menu

	echo "Enter your choice:"
	read option
	
	if [ -z ${option} ]; then
		exit
	fi
	
	if [ ${option} == "e" ]; then
		install_everything

	elif [ ${option} == "a" ]; then
		apt_get_dependencies
	elif [ ${option} == "c" ]; then
		install_avrdude_source
	elif [ ${option} == "b" ]; then
		install_avrdude_bin
	elif [ ${option} == "p" ]; then
		patch_arduino
	elif [ ${option} == "w" ]; then
		install_wiringpi
	elif [ ${option} == "x" ]; then
		uninstall_wiringpi
	elif [ ${option} == "d" ]; then
		install_dfu_programmer
	elif [ ${option} == "v" ]; then
		if [ ${board} == 0 ]; then
			board_menu
		fi
		if [ ! ${board} == 0 ]; then
			install_avrpi
		fi
	elif [ ${option} == "u" ]; then
		uninstall_avrpi

	elif [ ${option} == "s" ]; then
		board_menu
		if [ ! ${board} == 0 ]; then
			install_avrpi
		fi
	elif [ ${option} == "f" ]; then
		if [ ${board} == 0 ]; then
			board_menu
		fi
		if [ ! ${board} == 0 ]; then
			fuse_menu
		fi
	elif [ ${option} == "o" ]; then
		burn_caterina
	elif [ ${option} == "g" ]; then
		burn_dfu
	elif [ ${option} == "t" ]; then
		if [ ${board} == 0 ]; then
			board_menu
		fi
		test_blinky

	elif [ ${option} == "m" ]; then
		install_arduino_mk
		exit
	elif [ ${option} == "l" ]; then
		install_LUFA
		exit

	elif [ ${option} == "q" ]; then
		exit
	else
		#no_option ${option}
		echo "'${option}' is an unkown option."
	fi

done
