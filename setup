#!/bin/bash

board="0"
chip="0"
speed="0"

if [ -f /etc/avrpi.cfg ]; then
	source /etc/avrpi.cfg
fi

option="0"
style="0"


apt_get_everything()
{
#	sudo apt-get update
#	sudo apt-get upgrade
	sudo apt-get install -y arduino # Arduino IDE
	sudo apt-get install -y libftdi1 # deps for avrdude.deb
	sudo apt-get install -y avr-libc binutils-avr gcc-avr avra # avr-gcc and friends
#	sudo apt-get install -y gdb-avr simulavr # debugging
#	sudo apt-get install -y cmake minicom bc evtest # misc tools
	sudo apt-get install -y libusb-1.0-0-dev libftdi-dev autoconf bison flex # compile avrdude
}

install_avrdude_source()
{
	cd install/

	if [ ! -d avrdude-linuxgpio ]; then
		echo "avrdude-linuxgpio not found. Getting it..."
		git clone https://github.com/onandoffables/avrdude-linuxgpio || { echo "Error getting avrdude-linuxgpio"; exit 1; }
	fi

	cd avrdude-linuxgpio
	./install_avrdude.sh
	cd ..

	cd ..
}

install_avrdude_bin()
{
	cd install/

	cd avrdude-bin
	./install_avrdude_bin.sh
	cd ..

	cd ..
}

patch_arduino()
{
	cd install/

	if [ ! -d arduino-linuxgpio ]; then
		echo "arduino-linuxgpio not found. Getting it..."
		git clone https://github.com/onandoffables/arduino-linuxgpio || { echo "Error getting arduino-linuxgpio"; exit 1; }
	fi

	cd arduino-linuxgpio
	./patch_arduino.sh
	cd ..

	cd ..
}

test_blinky()
{
	cd src/test/
	if [ ${board} == "avrpi168" ]; then
		BRD=0 make flash
	elif [ ${board} == "avrpi328" ]; then
		if [ ${speed} == "12000000" ]; then
			BRD=2 make flash
		elif [ ${speed} == "16000000" ]; then
			BRD=3 make flash
		else
			# 8000000
			BRD=1 make flash
		fi
	elif [ ${board} == "avrpi32u4" ]; then
		BRD=4 make flash
	elif [ ${board} == "gertboard328" ]; then
		BRD=5 make flash
	elif [ ${board} == "gertduino328" ]; then
		BRD=6 make flash
		avrpi -r
	else
		echo "No blinky for you. Sorry."
		cd ../..
		return
	fi

	make clean
	cd ../..
}

install_wiringpi()
{
	cd install/

	if [ -d wiringPi ]; then
		echo "wiringPi found. updating..."
		cd wiringPi
		git pull origin
		./build
		cd ..
	else
		echo "First time git clone: installing"
		git clone git://git.drogon.net/wiringPi
		cd wiringPi
		./build
		cd ..
	fi
	
	cd ..
}

install_dfu_programmer()
{
	cd install/

	if [ -d dfu-programmer ]; then
		echo "dfu-programmer found. updating..."
		cd dfu-programmer
		git pull origin
	else
		echo "First time git clone: installing"
		git clone https://github.com/dfu-programmer/dfu-programmer
		cd dfu-programmer
	fi
	
	./bootstrap.sh
	./configure
	make
	sudo make install
	cd .. #dfu-programmer

	cd .. #install
}

install_avrpi()
{
	cd install/avrpi

	if [ -f /etc/avrpi.cfg ]; then
		echo "Old /etc/avrpi.cfg found. Backing up..." >&2
		sudo mv /etc/avrpi.cfg /etc/avrpi.cfg.bak
	else
		echo "/etc/avrpi.cfg not found. Installing avrpi default config..." >&2
	fi
	
	#local avrpi.cfg
	if [ -f avrpi.cfg ]; then
		#echo "Existing local config file found. Removing and creating new one..." >&2
		rm avrpi.cfg
	fi

	#board
	echo "#board can be avrpi168, avrpi328, avrpi32u4, gertboard328, gertduino328, gertduino48" >> avrpi.cfg
	echo "board=${board}" >> avrpi.cfg
	echo "" >> avrpi.cfg
	
	#chip
	echo "#chip can be atmega168p, atmega328p, atmega32u4, atmega48p" >> avrpi.cfg
	echo "chip=${chip}" >> avrpi.cfg
	echo "" >> avrpi.cfg
	
	#speed
	echo "#speed 8000000, 12000000, 16000000" >> avrpi.cfg
	echo "speed=${speed}" >> avrpi.cfg
	echo "" >> avrpi.cfg
	
	#programmer
	echo "#programmer linuxgpio, gpio" >> avrpi.cfg
	echo "programmer=linuxgpio" >> avrpi.cfg
	echo "" >> avrpi.cfg
	
	#port
	echo "#port /dev/ttyAMA0, /dev/ttyUSB0, /dev/ttyACM0" >> avrpi.cfg
	if [ ${chip} == "atmega32u4" ]; then
		echo "port=/dev/ttyACM0" >> avrpi.cfg
	else
		echo "port=/dev/ttyAMA0" >> avrpi.cfg
	fi
	echo "" >> avrpi.cfg
	
	#baud
	echo "#baud 9600, 38400, 57600, 115200 " >> avrpi.cfg
	echo "baud=9600" >> avrpi.cfg
	echo "" >> avrpi.cfg
	
	#delay
	echo "#delay 0, 5, 20 (isp clock delay)" >> avrpi.cfg
	echo "#anything other than 0 adds -i avrdude option" >> avrpi.cfg
	echo "delay=5" >> avrpi.cfg
	#echo "" >> avrpi.cfg
	
	echo "Copy new avrpi.cfg to /etc/avrpi.cfg" >&2
	sudo cp avrpi.cfg /etc/avrpi.cfg
	echo "Copy avrpi to /usr/local/bin/avrpi" >&2
	sudo cp avrpi /usr/local/bin/avrpi
	
	avrpi -s
	
	echo "Cleaning up local avrpi.cfg..." >&2
	rm avrpi.cfg
	
	cd ../..
}

install_arduino_mk()
{
	cd src/
	./install_Arduino-Makefile.sh
	cd ..
	
	echo ""
	echo "Usage:"
	echo "  cd src/Arduino-Makefile/examples/Blink"
	echo "  [edit Makefile]"
	echo "  make avrpi"
}

install_LUFA()
{
	cd src/
	./install_LUFA-AVRPI32U4.sh
	cd ..
	
	echo ""
	echo "Usage:"
	echo "  cd src/LUFA-AVRPI32U4/examples/Keyboard"
	echo "  make avrdude"
	echo "  lsusb # look for USB device ('Atmel Corp. LUFA *')"
}

install_everything()
{
	apt_get_everything
	patch_arduino
	install_avrdude_bin
#	install_wiringpi
#	install_avrpi
}

set_fuse()
{
	#from factory: (E:xx, H:xx, L:xx)
	avrdude -i16 -c linuxgpio -p $1 -U efuse:w:$2:m -U hfuse:w:$3:m -U lfuse:w:$4:m
}

no_option()
{
	echo "'$1' is not a valid option."
	exit
}

fuse_menu()
{
	banner

	echo "  Fuse settings:"

	if [ ${board} == "avrpi168" ]; then
		echo "    f)    set ATmega168p fuses (with crystal)"
	elif [ ${board} == "avrpi328" ]; then
		echo "    a)    set ATmega328p fuses (1 MHz, no crystal)"
		echo "    b)    set ATmega328p fuses (8 MHz, no crystal)"
		echo "    f)    set ATmega328p fuses (8-16 MHz with crystal)"
		echo "    g)    set ATmega328p fuses (8-16 MHz with crystal + preserve EEPROM)"
	elif [ ${board} == "avrpi32u4" ]; then
		echo "    f)    set ATmega32U4 fuses (with crystal. recommended)"
		echo "    g)    set ATmega32U4 fuses (with crystal + HWB enabled)"
	elif [ ${board} == "gertboard328" ]; then
		echo "    f)    set ATmega328p fuses (with crystal)"
	elif [ ${board} == "gertduino328" ]; then
		echo "    f)    set ATmega328p fuses (with crystal)"
	elif [ ${board} == "gertduino48" ]; then
		echo "    f)    set ATmega48p fuses (1 MHz)"
		echo "    g)    set ATmega48p fuses (8 MHz)"
	fi
	
	echo ""
	echo "Enter the fuse setting you want:"
	read fuse

	#set_fuse efuse hfuse lfuse
	if [ ${board} == "avrpi168" ]; then
		#from factory: (E:01, H:DF, L:62)
		if [ ${fuse} == "f" ]; then
			set_fuse ${chip} 0x00 0xDF 0xE7
		else
			no_option $fuse
		fi
	elif [ ${board} == "avrpi328" ]; then
		#from factory: (E:07, H:D9, L:62)
		if [ ${fuse} == "a" ]; then
			set_fuse ${chip} 0x07 0xD9 0x62
		elif [ ${fuse} == "b" ]; then
			set_fuse ${chip} 0x07 0xD9 0xE2
		elif [ ${fuse} == "f" ]; then
			set_fuse ${chip} 0x07 0xD9 0xE7
		elif [ ${fuse} == "g" ]; then
			set_fuse ${chip} 0x07 0xD1 0xE7
		else
			no_option $fuse
		fi
	elif [ ${board} == "avrpi32u4" ]; then
		#from factory: (E:03, H:99, L:5E)
		if [ ${fuse} == "f" ]; then
			set_fuse ${chip} 0xcb 0xd8 0xde
		elif [ ${fuse} == "g" ]; then
			set_fuse ${chip} 0xc3 0xd8 0xde
		else
			no_option $fuse
		fi
	elif [ ${board} == "gertboard168" ]; then
		#from factory: (E:F9, H:DF, L:62)
		if [ ${fuse} == "f" ]; then
			set_fuse ${chip} 0x00 0xDF 0xE7
		else
			no_option $fuse
		fi
	elif [ ${board} == "gertboard328" ]; then
		#from factory: (E:07, H:D9, L:62)
		if [ ${fuse} == "f" ]; then
			set_fuse ${chip} 0x07 0xD9 0xE7
		else
			no_option $fuse
		fi
	elif [ ${board} == "gertduino328" ]; then
		#from factory: (E:07, H:D9, L:62)
		if [ ${fuse} == "f" ]; then
			set_fuse ${chip} 0x07 0xD9 0xE7
		else
			no_option $fuse
		fi
	elif [ ${board} == "gertduino48" ]; then
		#from factory: (E:FF, H:DF, L:62)
		if [ ${fuse} == "f" ]; then
			set_fuse ${chip} 0xFF 0xDF 0x62
		elif [ ${fuse} == "g" ]; then
			set_fuse ${chip} 0xFF 0xDF 0xE2
		else
			no_option $fuse
		fi
	fi
}

banner()
{
	#clear
	echo ""
	echo "#######################################################################"
	echo "#                          avrpi-tools                                #"
	echo "#######################################################################"
	echo ""
}

board_menu()
{
	banner

	#echo "    0)    AVRPi-168 (ATmega168p @ 8/12/16 MHz)"
	echo "  AVRPi-328"
	echo "    1)    ATmega328p @ 8MHz"
	echo "    2)    ATmega328p @ 12MHz"
	echo "    3)    ATmega328p @ 16MHz (overclocked)"
	echo ""
	echo "  AVRPi-32U4"
	echo "    4)    ATmega32U4 @ 8 MHz"
	echo ""
	echo "  Gertware"
	echo "    5)    Gertboard (ATmega328p @ 12 MHz)"
	echo "    6)    Gertduino (ATmega328p @ 16 MHz)"
	echo "    7)    Gertduino48 (ATmega48p @ 1 MHz)"
	echo "    8)    Gertduino48 (ATmega48p @ 8 MHz)"
	echo ""

	echo "What board do you have:"
	read boardnum

	#if [ ${boardnum} == "0" ]; then
	#	board="avrpi168"
	#	chip="atmega168p"
	#	speed="8000000"
	#fi
	if [ ${boardnum} == "1" ]; then
		board="avrpi328"
		chip="atmega328p"
		speed="8000000"
	elif [ ${boardnum} == "2" ]; then
		board="avrpi328"
		chip="atmega328p"
		speed="12000000"
	elif [ ${boardnum} == "3" ]; then
		board="avrpi328"
		chip="atmega328p"
		speed="16000000"
	elif [ ${boardnum} == "4" ]; then
		board="avrpi32u4"
		chip="atmega32u4"
		speed="8000000"
	elif [ ${boardnum} == "5" ]; then
		board="gertboard328"
		chip="atmega328p"
		speed="12000000"
	elif [ ${boardnum} == "6" ]; then
		board="gertduino328"
		chip="atmega328p"
		speed="16000000"
	elif [ ${boardnum} == "7" ]; then
		board="gertduino48"
		chip="atmega48p"
		speed="8000000"
	else
		echo "Error. Please enter the number of the board."
		no_option ${boardnum}
	fi
}

main_menu()
{
	echo "  Install everything in 1 easy step:"
	echo "    e)    Arduino IDE + avrdude"
	echo ""
	echo "  First time - fuses and test:"
	if [ ${board} == "0" ]; then
		echo "    s)    set board/chip/speed"
		echo "    f)    set fuses for your board"
	else
		echo "    s)    change to different board/chip"
		echo "    f)    set fuses for ${chip} on ${board}"
	fi
	echo "    t)    make + upload test/blinky.hex"
	echo ""
	echo "  Custom install:"
	echo "    a)    apt-get all dependencies"
	echo "    p)    patch arduino"
	echo "    b)    install pre-compiled avrdude binary"
	echo "    c)    compile + install avrdude from source"
	echo ""
	echo "  Optional extra:"
	echo "    w)    install wiringPi"
	echo "    v)    install avrpi tool"
	if [ ${board} == "avrpi32u4" ]; then
		echo "    d)    install dfu-programmer"
	fi
	echo ""
	echo "  Software and projects:"
	echo "    m)    install Arduino-Makefile"
	if [ ${board} == "avrpi32u4" ]; then
		echo "    l)    install LUFA-AVRPI32U4"
	fi
	echo ""
	echo "    q)    quit"
	echo ""
}

while [ ${option} != "q" ]; do

	banner
	#echo "  chip:  ${chip}"
	#echo "  speed: ${speed}"
	#echo ""
	main_menu

	echo "Enter your choice:"
	read option
	
	if [ -z ${option} ]; then
		exit
	fi
	
	if [ ${option} == "e" ]; then
		install_everything

	elif [ ${option} == "a" ]; then
		apt_get_everything
	elif [ ${option} == "c" ]; then
		install_avrdude_source
	elif [ ${option} == "b" ]; then
		install_avrdude_bin
	elif [ ${option} == "p" ]; then
		patch_arduino
	elif [ ${option} == "w" ]; then
		install_wiringpi
	elif [ ${option} == "d" ]; then
		install_dfu_programmer
	elif [ ${option} == "v" ]; then
		if [ ${board} == "0" ]; then
			board_menu
		fi
		install_avrpi

	elif [ ${option} == "s" ]; then
		board_menu
		install_avrpi
	elif [ ${option} == "f" ]; then
		if [ ${board} == "0" ]; then
			board_menu
		fi
		fuse_menu
	elif [ ${option} == "t" ]; then
		if [ ${board} == "0" ]; then
			board_menu
		fi
		test_blinky

	elif [ ${option} == "m" ]; then
		install_arduino_mk
		exit
	elif [ ${option} == "l" ]; then
		install_LUFA
		exit

	elif [ ${option} == "q" ]; then
		exit
	else
		#no_option ${option}
		echo "'${option}' is an unkown option."
	fi

done
