#!/bin/bash

BOARD="0"
CHIP="0"
SPEED="0"
OPTION="0"
STYLE="0"


apt_get_everything()
{
#	sudo apt-get update
#	sudo apt-get upgrade
	sudo apt-get install -y arduino avr-libc binutils-avr gcc-avr avra
#	sudo apt-get install -y gdb-avr simulavr
	sudo apt-get install -y cmake minicom bc evtest
	sudo apt-get install -y libusb-1.0-0-dev libusb-dev libftdi-dev autoconf bison flex
}

compile_from_source()
{
	cd install/

	AVRDUDE_TGZ=avrdude-6.1.tar.gz

	if [ ! -f $AVRDUDE_TGZ ]; then
		echo "$AVRDUDE_TGZ not found. Getting it..."
		wget http://download.savannah.gnu.org/releases/avrdude/${AVRDUDE_TGZ} || { echo "Error getting "${AVRDUDE_TGZ}; }
	fi

	if [ ! -f $AVRDUDE_TGZ ]; then
		echo "$AVRDUDE_TGZ not found. Trying another location..."
		https://github.com/onandoffables/avrm/blob/master/install/${AVRDUDE_TGZ}?raw=true || { echo "Error getting "${AVRDUDE_TGZ}; }
	fi

	if [ -f $AVRDUDE_TGZ ]; then
		echo "Found $AVRDUDE_TGZ: extracting..."
		tar -xzvf ${AVRDUDE_TGZ} || { echo "Error extracting "${AVRDUDE_TGZ}; exit 1; }
	fi

	cd avrdude-6.1
	./bootstrap
	./configure --enable-linuxgpio=yes --prefix=/usr --sysconfdir=/etc
	make
	sudo make install
	cd ..

	sudo install -b -m 644 avrdude-bin/avrdude.conf '/etc'
	sudo chmod 4755 /usr/bin/avrdude

	cd ..
}

install_bin()
{
	echo 'installing avrdude to usr/bin'
	sudo mkdir -p '/usr/bin'
	sudo install -m 4755 install/avrdude-bin/avrdude '/usr/bin'

	echo 'installing avrdude.conf to /etc'
	sudo mkdir -p '/etc'
	sudo install -b -m 644 install/avrdude-bin/avrdude.conf '/etc'

	echo 'installing avrdude.1.gz to /usr/share/man/man1'
	sudo mkdir -p '/usr/share/man/man1'
	sudo install -m 644 install/avrdude-bin/avrdude.1.gz '/usr/share/man/man1'
}

patch_arduino()
{
	sudo mv /usr/share/arduino/hardware/arduino/programmers.txt /usr/share/arduino/hardware/arduino/programmers.txt.bak
	sudo cp install/arduino/programmers.txt '/usr/share/arduino/hardware/arduino'

	sudo mv /usr/share/arduino/hardware/arduino/boards.txt /usr/share/arduino/hardware/arduino/boards.txt.bak
	sudo cp install/arduino/boards.txt '/usr/share/arduino/hardware/arduino'

	sudo mv /usr/share/arduino/hardware/arduino/cores/arduino/USBCore.cpp /usr/share/arduino/hardware/arduino/cores/arduino/USBCore.cpp.bak
	sudo cp install/arduino/USBCore.cpp '/usr/share/arduino/hardware/arduino/cores/arduino/USBCore.cpp'
}

m168_fuses()
{
	#from factory: (E:F9, H:DF, L:62)
	avrdude -v -c linuxgpio -p m328p -U lfuse:w:0xE7:m -U hfuse:w:0xDF:m -U efuse:w:0x00:m
}

m328_fuses()
{
	#from factory: (E:07, H:D9, L:62)
	avrdude -v -c linuxgpio -p m328p -U lfuse:w:0xE7:m -U hfuse:w:0xD9:m -U efuse:w:0x07:m
}

m32u4_fuses()
{
	#from factory:  (E:F3, H:99, L:5E)
	avrdude -v -c linuxgpio -p m32u4 -U lfuse:w:0xde:m -U hfuse:w:0xd8:m -U efuse:w:0xcb:m
	#avrdude -v -c linuxgpio -p m32u4 -U lfuse:w:0xde:m -U hfuse:w:0xd8:m -U efuse:w:0xfb:m
}

m32u4_fuses_hwb()
{
	#from factory:  (E:F3, H:99, L:5E)
	avrdude -v -c linuxgpio -p m32u4 -U lfuse:w:0xde:m -U hfuse:w:0xd8:m -U efuse:w:0xc3:m
}

test_blinky()
{
	cd src/test/
	if [ "$BOARD" == "AVRM168" ]; then
		BRD=0 make flash
	elif [ "$BOARD" == "AVRM328" ]; then
		BRD=1 make flash
	elif [ "$BOARD" == "AVRM32U4" ]; then
		BRD=2 make flash
	fi
	make clean
	cd ../..
}

install_wiringpi()
{
	cd install/

	if [ -d wiringPi ]; then
		echo "wiringPi found. updating..."
		cd wiringPi
		git pull origin
		./build
		cd ..
	else
		echo "First time git clone: installing"
		git clone git://git.drogon.net/wiringPi
		cd wiringPi
		./build
		cd ..
	fi
	
	cd ..
}

install_dfu_programmer()
{
	cd install/

	if [ -d dfu-programmer ]; then
		echo "dfu-programmer found. updating..."
		cd dfu-programmer
		git pull origin
	else
		echo "First time git clone: installing"
		git clone https://github.com/dfu-programmer/dfu-programmer
		cd dfu-programmer
	fi
	
	./bootstrap.sh
	./configure
	make
	sudo make install
	cd .. #dfu-programmer

	cd .. #install
}

install_avrm()
{
	cd install/avrm

	if [ -f /etc/avrm.cfg ]; then
		echo "Old /etc/avrm.cfg found. Backing up..." >&2
		sudo mv /etc/avrm.cfg /etc/avrm.cfg.bak
	else
		echo "/etc/avrm.cfg not found. Installing avrm default config..." >&2
	fi
	
	#local avrm.cfg
	if [ -f avrm.cfg ]; then
		echo "Existing local config file found. Removing and creating new one..." >&2
		rm avrm.cfg
	else
		echo "No local config file found. Creating new one..." >&2
	fi


	#avrm_board
	echo "#avrm_board can be avrm168, avrm328, avrm32u4, gertboard, gertduino" >> avrm.cfg
	if [ "$BOARD" == "AVRM168" ]; then
		echo "avrm_board=avrm168" >> avrm.cfg
	elif [ "$BOARD" == "AVRM328" ]; then
		echo "avrm_board=avrm328" >> avrm.cfg
	elif [ "$BOARD" == "AVRM32U4" ]; then
		echo "avrm_board=avrm32u4" >> avrm.cfg
	fi
	echo "" >> avrm.cfg

	#avrm_chip
	echo "#avrm_chip can be atmega168p, atmega328p, atmega32u4" >> avrm.cfg
	if [ "$CHIP" == "ATmega168p" ]; then
		echo "avrm_chip=avrm168" >> avrm.cfg
	elif [ "$CHIP" == "ATmega328p" ]; then
		echo "avrm_chip=atmega328p" >> avrm.cfg
	elif [ "$CHIP" == "ATmega32U4" ]; then
		echo "avrm_chip=atmega32u4" >> avrm.cfg
	fi
	echo "" >> avrm.cfg

	#avrm_speed
	echo "#avrm_speed 8000000, 12000000, 16000000" >> avrm.cfg
	echo "avrm_speed=$SPEED" >> avrm.cfg
	echo "" >> avrm.cfg

	#avrm_programmer
	echo "#avrm_programmer linuxgpio, gpio" >> avrm.cfg
	echo "avrm_programmer=linuxgpio" >> avrm.cfg
	echo "" >> avrm.cfg

	#avrm_port
	echo "#avrm_port /dev/ttyAMA0, /dev/ttyUSB0, /dev/ttyACM0" >> avrm.cfg
	echo "avrm_port=/dev/ttyAMA0" >> avrm.cfg
	echo "" >> avrm.cfg

	#avrm_baud
	echo "#avrm_baud 9600, 38400, 57600, 115200 " >> avrm.cfg
	echo "avrm_baud=115200" >> avrm.cfg
	echo "" >> avrm.cfg

	#avrm_delay
	echo "#avrm_delay 0, 5 20 (isp clock delay)" >> avrm.cfg
	echo "#anything other than 0 adds -i avrdude option" >> avrm.cfg
	echo "avrm_delay=5" >> avrm.cfg
	#echo "" >> avrm.cfg


	sudo cp avrm.cfg /etc/avrm.cfg
	sudo cp avrm /usr/local/bin/avrm
	
	echo "Please 'sudo nano /etc/avrm.cfg' and edit for your board." >&2
	
	echo "Cleaning up local avrm.cfg..." >&2
	rm avrm.cfg

	cd ../..
}

install_arduino_mk()
{
	# upload with 'make avrm'
	cd src/
	./install_Arduino-Makefile.sh
	cd ..
}

install_arduino-cmake()
{
	# upload with 'make [projectname]-burn'
	cd src/
	./install_arduino-cmake.sh
	cd ..
}

install_LUFA()
{
	# upload with 'make avrdude'
	cd src/
	./install_LUFA-AVRM32U4.sh
	cd ..
}

do_fuses()
{
	if [ "$BOARD" == "AVRM168" ]; then
		m168_fuses
	elif [ "$BOARD" == "AVRM328" ]; then
		m328_fuses
	elif [ "$BOARD" == "AVRM32U4" ]; then
		m32u4_fuses
	elif [ "$BOARD" == "gertboard" ]; then
		m328_fuses
	elif [ "$BOARD" == "gertduino" ]; then
		m328_fuses
	fi
}

banner()
{
	#clear
	echo ""
	echo "#######################################################################"
	echo "#                                AVRM                                 #"
	echo "#######################################################################"
	echo ""
}

usage()
{
	echo ""
	echo "  Install everything in 1 easy step:"
	echo "    e)    use pre-compiled avrdude (like a noob)"
	echo "    z)    compile + install avrdude from source (like a pro)"
	echo ""
	echo "  Custom install:"
	echo "    a)    apt-get all prerequisites"
	echo "    p)    patch arduino"
	echo "    w)    install wiringPi"
	echo "    d)    install dfu-programmer"
	echo "    b)    install pre-compiled avrdude binary"
	echo "    c)    compile + install avrdude from source"
	echo "    v)    install avrm tool"
	if [ "$BOARD" == "AVRM168" ]; then
		echo "    f)    set ATmega168p fuses (with crystal)"
	elif [ "$BOARD" == "AVRM328" ]; then
		echo "    f)    set ATmega328p fuses (with crystal)"
	elif [ "$BOARD" == "AVRM32U4" ]; then
		echo "    f)    set ATmega32U4 fuses (with crystal)"
		echo "    g)    set ATmega32U4 fuses (with crystal + HWB enabled)"
	fi
	echo "    t)    make + upload test/blinky.hex"
	echo ""
	echo "  Extra software and projects:"
	echo "    m)    install Arduino-Makefile"
	echo "    s)    install arduino-cmake"
	if [ "$BOARD" == "AVRM32U4" ]; then
		echo "    l)    install LUFA-AVRM32U4"
	fi
	echo ""
	echo "    q)    quit"
	echo ""
}

install_everything()
{
	apt_get_everything
	if [ "$STYLE" == "noob" ]; then
		install_bin
	elif [ "$STYLE" == "pro" ]; then
		compile_from_source
	fi
	patch_arduino
	install_wiringpi
	#install_dfu_programmer
	install_avrm
	do_fuses
	test_blinky
}

banner

#echo "    0)    AVRM168 (ATmega168p @ 8/12/16 MHz)"
echo "  AVRM328"
echo "    1)    ATmega328p @ 8MHz"
echo "    2)    ATmega328p @ 12MHz"
echo "    3)    ATmega328p @ 16MHz (overclocked)"
echo ""
echo "  AVRM32U4"
echo "    4)    ATmega32U4 @ 8 MHz"
echo ""
echo "  Gertware (ATmega328p)"
echo "    5)    Gertboard (ATmega328p @ 12 MHz)"
echo "    6)    Gertduino (ATmega328p @ 16 MHz)"
echo ""

echo "What board do you have:"
read BOARDNUM

if [ "$BOARDNUM" == "0" ]; then
	BOARD="AVRM168"
	CHIP="ATmega168p"
	SPEED="8000000"
elif [ "$BOARDNUM" == "1" ]; then
	BOARD="AVRM328"
	CHIP="ATmega328p"
	SPEED="8000000"
elif [ "$BOARDNUM" == "2" ]; then
	BOARD="AVRM328"
	CHIP="ATmega328p"
	SPEED="12000000"
elif [ "$BOARDNUM" == "3" ]; then
	BOARD="AVRM328"
	CHIP="ATmega328p"
	SPEED="16000000"
elif [ "$BOARDNUM" == "4" ]; then
	BOARD="AVRM32U4"
	CHIP="ATmega32U4"
	SPEED="8000000"
elif [ "$BOARDNUM" == "5" ]; then
	BOARD="gertboard"
	CHIP="ATmega328p"
	SPEED="12000000"
elif [ "$BOARDNUM" == "6" ]; then
	BOARD="gertduino"
	CHIP="ATmega328p"
	SPEED="16000000"
else
	echo "Error. Please enter the number of the board."
	exit
fi


while [ "$OPTION" != "q" ]; do

	banner
	echo "  Using a board with a $CHIP"
	usage

	echo "  Enter your choice:"
	read OPTION
	
	if [ "$OPTION" == "e" ]; then
		STYLE="noob"
		install_everything
	elif [ "$OPTION" == "z" ]; then
		STYLE="pro"
		install_everything

	elif [ "$OPTION" == "a" ]; then
		apt_get_everything
	elif [ "$OPTION" == "c" ]; then
		compile_from_source
	elif [ "$OPTION" == "b" ]; then
		install_bin
	elif [ "$OPTION" == "p" ]; then
		patch_arduino
	elif [ "$OPTION" == "w" ]; then
		install_wiringpi
	elif [ "$OPTION" == "d" ]; then
		install_dfu_programmer
	elif [ "$OPTION" == "v" ]; then
		install_avrm
	elif [ "$OPTION" == "f" ]; then
		do_fuses
	elif [ "$OPTION" == "g" ]; then
		if [ "$BOARD" == "AVRM32U4" ]; then
			m32u4_fuses_hwb
		fi
	elif [ "$OPTION" == "t" ]; then
		test_blinky


	elif [ "$OPTION" == "m" ]; then
		install_arduino_mk
	elif [ "$OPTION" == "s" ]; then
		install_arduino-cmake
	elif [ "$OPTION" == "l" ]; then
		install_LUFA


	elif [ "$OPTION" == "q" ]; then
		exit
	else
		echo "'$OPTION' is an unkown option."
	fi

done
