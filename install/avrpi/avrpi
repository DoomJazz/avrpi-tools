#!/bin/bash

cmd="$1"
file="$2"

read_config()
{
	if [ -f /etc/avrpi.cfg ]; then
		#echo "Reading /etc/avrpi.cfg" >&2
		source /etc/avrpi.cfg
	else
		echo "No config file found. Please install avrpi tool." >&2
		exit 1
	fi
}

show_readconfig()
{
	read_config
	
	echo "Use 'avrpi -c' to edit settings:" >&2
	echo "  board = ${board}" >&2
	echo "  chip = ${chip}" >&2
	echo "  speed = ${speed}" >&2
	echo "  programmer = ${programmer}" >&2
	echo "  port = ${port}" >&2
	echo "  baud = ${baud}" >&2
	echo "  delay = ${delay}" >&2

	echo >&2
}


reset()
{
	# RST 8
	gpio -g mode 8 out
	gpio -g write 8 0
	sleep 1
	gpio -g write 8 1
	if [ ${board} == "gertduino328" ]; then
		#do nothing (keep as output and high)
		#device_tree needs to be disabled
		gpio -g mode 8 out
	else
		gpio -g mode 8 in
	fi
}

bootloader()
{
	# RST 8
	# PE2 23
	gpio -g mode 23 out
	gpio -g mode 8 out
	gpio -g write 23 0
	gpio -g write 8 0
	sleep 1
	gpio -g write 8 1
	sleep 1
	gpio -g write 23 1
	gpio -g mode 8 in
	gpio -g mode 23 in
}


usage()
{
	echo "Usage: avrpi [options] <filename>

[options] is any of the following:
  -c            config        edit avrpi config file
  -f <file>     flash <file>  uploads <file> to AVRPI board
  -u <file>     upload <file> uploads <file> using bootloader
  -i            info          show info about chip
  -r            reset         reset AVR chip
  -b            bootloader    enter bootloader mode (HWB/PE2 low)
  -m            minicom       start minicom on ${port} @ ${baud}
  -h            help          show this info
  -s            show          show config
" >&2
}

read_config

while getopts ":hsibcmrdu:f:" opt; do
  case $opt in
    h)
      cmd="help"
      ;;
    s)
      cmd="show"
      ;;
    i)
      cmd="info"
      ;;
    b)
      cmd="bootloader"
      echo "reset to bootloader" >&2
      ;;
    c)
      cmd="config"
      echo "configure avrpi" >&2
      ;;
    m)
      cmd="minicom"
      echo "start minicom" >&2
      ;;
    r)
      cmd="reset"
      echo "reset" >&2
      ;;
    f)
      cmd="flash"
      file="$OPTARG"
      ;;
    u)
      cmd="upload"
      file="$OPTARG"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      cmd="$OPTARG"
      usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      usage
      exit 1
      ;;
  esac
done



if [ "$cmd" == "reset" ]; then
	reset
elif [ "$cmd" == "bootloader" ]; then
	bootloader
elif [ "$cmd" == "config" ]; then
	sudo nano /etc/avrpi.cfg
elif [ "$cmd" == "info" ]; then
	echo "avrdude -v -c $programmer -p $chip" >&2
	avrdude -v -c $programmer -p $chip
elif [ "$cmd" == "flash" ]; then
	if [ "$delay" == 0 ]; then
		echo "avrdude -v -c $programmer -p $chip -U flash:w:$file" >&2
		avrdude -v -c $programmer -p $chip -U flash:w:$file
	else
		echo "avrdude -v -c $programmer -p $chip -i $delay -U flash:w:$file" >&2
		avrdude -v -c $programmer -p $chip -i $delay -U flash:w:$file
	fi
elif [ "$cmd" == "upload" ]; then
	bootloader
	# needs a port it can find, but is ignored
	avrdude -v -c avr109 -p $chip -P $port -U flash:w:$file
elif [ "$cmd" == "minicom" ]; then
	minicom -D ${port} -b ${baud}
elif [ "$cmd" == "help" ]; then
	usage
elif [ "$cmd" == "show" ]; then
	show_readconfig
elif [ "$cmd" == "" ]; then
	usage
	show_readconfig
else
	usage
fi
