#!/bin/bash

cmd="$1"
file="$2"

read_config()
{
	if [ -f /etc/avrpi.cfg ]; then
		#echo "Reading /etc/avrpi.cfg" >&2
		source /etc/avrpi.cfg
	else
		echo "No config file found. Please install avrpi tool." >&2
		exit 1
	fi
}

show_readconfig()
{
	read_config
	
	echo "Use 'avrpi -c' to edit settings:" >&2
	echo "  board = ${avrpi_board}" >&2
	echo "  chip = ${avrpi_chip}" >&2
	echo "  speed = ${avrpi_speed}" >&2
	echo "  programmer = ${avrpi_programmer}" >&2
	echo "  port = ${avrpi_port}" >&2
	echo "  baud = ${avrpi_baud}" >&2
	echo "  delay = ${avrpi_delay}" >&2

	echo >&2
}


reset()
{
	gpio -g mode 8 out
	gpio -g write 8 0
	sleep 1
	gpio -g write 8 1
	if [ "$avrpi_board" == "gertduino328" ]; then
		#do nothing (keep as output and high)
		#device_tree needs to be disabled
		gpio -g mode 8 out
	else
		gpio -g mode 8 in
	fi
}


usage()
{
	echo "Usage: avrpi [options] <filename>

[options] is any of the following:
  -c            config        edit avrpi config file
  -f <file>     flash <file>  uploads <file> to AVRPI board
  -i            info          show info about chip
  -r            reset         reset AVR chip
  -b            bootloader    enter bootloader mode (HWB/PE2 low)
  -m            minicom       start minicom on ${avrpi_port} @ ${avrpi_baud}
  -h            help          show this info
  -s            show          show config
" >&2
}

read_config

while getopts ":hsibcmrdf:" opt; do
  case $opt in
    h)
      cmd="help"
      ;;
    s)
      cmd="show"
      ;;
    i)
      cmd="info"
      ;;
    b)
      cmd="bootloader"
      echo "reset to bootloader" >&2
      ;;
    c)
      cmd="config"
      echo "configure avrpi" >&2
      ;;
    m)
      cmd="minicom"
      echo "start minicom" >&2
      ;;
    r)
      cmd="reset"
      echo "reset" >&2
      ;;
    f)
      cmd="flash"
      file="$OPTARG"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      cmd="$OPTARG"
      usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      usage
      exit 1
      ;;
  esac
done



if [ "$cmd" == "reset" ]; then
	reset
elif [ "$cmd" == "bootloader" ]; then
	#TODO implement
	reset
elif [ "$cmd" == "config" ]; then
	sudo nano /etc/avrpi.cfg
elif [ "$cmd" == "info" ]; then
	echo "avrdude -v -c $avrpi_programmer -p $avrpi_chip" >&2
	avrdude -v -c $avrpi_programmer -p $avrpi_chip
elif [ "$cmd" == "flash" ]; then
	if [ "$avrpi_delay" == 0 ]; then
		echo "avrdude -v -c $avrpi_programmer -p $avrpi_chip -U flash:w:$file" >&2
		avrdude -v -c $avrpi_programmer -p $avrpi_chip -U flash:w:$file
	else
		echo "avrdude -v -c $avrpi_programmer -p $avrpi_chip -i $avrpi_delay -U flash:w:$file" >&2
		avrdude -v -c $avrpi_programmer -p $avrpi_chip -i $avrpi_delay -U flash:w:$file
	fi
elif [ "$cmd" == "minicom" ]; then
	minicom -D ${avrpi_port} -b ${avrpi_baud}
elif [ "$cmd" == "help" ]; then
	usage
elif [ "$cmd" == "show" ]; then
	show_readconfig
elif [ "$cmd" == "" ]; then
	usage
	show_readconfig
else
	usage
fi
