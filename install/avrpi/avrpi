#!/bin/bash

# Copyright 2015 onandoffables <on@onandoffables.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

read_config()
{
	if [ -f /etc/avrpi.cfg ]; then
		#echo "Reading /etc/avrpi.cfg" >&2
		source /etc/avrpi.cfg
	else
		echo "No config file found. Please (re)install avrpi tool." >&2
		exit 1
	fi
}

show_readconfig()
{
	read_config
	
	echo "Use 'avrpi -c' to edit settings:" >&2
	echo "  board = ${board}" >&2
	echo "  chip = ${chip}" >&2
	echo "  speed = ${speed}" >&2
	echo "  programmer = ${programmer}" >&2
	echo "  port = ${port}" >&2
	echo "  baud = ${baud}" >&2
	echo "  delay = ${delay}" >&2

	echo >&2
}


reset()
{
	if [ -f /usr/local/bin/gpio ]; then
		# RST 8
		gpio -g mode 8 out
		gpio -g write 8 0
		sleep 1
		gpio -g write 8 1
		if [ ${board} == "gertduino328" ]; then
			#do nothing (keep as output and high)
			#device_tree needs to be disabled
			gpio -g mode 8 out
		else
			gpio -g mode 8 in
		fi
	else
		echo "No gpio utility found. Skipping."
	fi
}

bootloader()
{
	if [ -f /usr/local/bin/gpio ]; then
		# RST 8
		# PE2 23
		gpio -g mode 23 out
		gpio -g mode 8 out
		gpio -g write 23 0
		gpio -g write 8 0
		sleep 1
		gpio -g write 8 1
		sleep 1
		gpio -g write 23 1
		gpio -g mode 8 in
		gpio -g mode 23 in
	else
		echo "No gpio utility found. Skipping."
	fi
}


usage()
{
	echo "Usage: avrpi [options] <filename>

[options] is any of the following:
  -f <file>   flash <file>    flash <file> to avrpi board
  -u <file>   upload <file>   upload <file> using caterina bootloader
  -d <file>   upload <file>   upload <file> using Atmel DFU bootloader
  -i          info            show info about chip
  -r          reset           reset AVR chip
  -b          bootloader      enter bootloader mode (HWB fuses set)
  -m          minicom         start minicom on ${port} @ ${baud}
  -n          screen          start screen on ${port} @ ${baud}
  -h          help            show this info
  -c          config          edit avrpi config file
  -s          show            show config
" >&2
}

read_config
cmd=0
file=0

while getopts ":hsibcmnrd:u:f:" opt; do
  case $opt in
    h)
      cmd="help"
      ;;
    s)
      cmd="show"
      ;;
    i)
      cmd="info"
      ;;
    b)
      cmd="bootloader"
      echo "reset to bootloader" >&2
      ;;
    c)
      cmd="config"
      echo "configure avrpi" >&2
      ;;
    m)
      cmd="minicom"
      echo "start minicom" >&2
      ;;
    n)
      cmd="screen"
      echo "start screen" >&2
      ;;
    r)
      cmd="reset"
      echo "reset" >&2
      ;;
    f)
      cmd="flash"
      file="$OPTARG"
      ;;
    u)
      cmd="upload"
      file="$OPTARG"
      ;;
    d)
      cmd="upload_dfu"
      file="$OPTARG"
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      cmd="$OPTARG"
      usage
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      usage
      exit 1
      ;;
  esac
done



if [ ${cmd} == "reset" ]; then
	reset
elif [ ${cmd} == "bootloader" ]; then
	bootloader
elif [ ${cmd} == "config" ]; then
	sudo nano /etc/avrpi.cfg
elif [ ${cmd} == "info" ]; then
	echo "avrdude -v -c ${programmer} -p ${chip}" >&2
	avrdude -v -c ${programmer} -p ${chip}
elif [ ${cmd} == "flash" ]; then
	if [ ${delay} == 0 ]; then
		echo "avrdude -v -c ${programmer} -p ${chip} -U flash:w:${file}" >&2
		avrdude -v -c ${programmer} -p ${chip} -U flash:w:${file}:i
	else
		echo "avrdude -v -c ${programmer} -p ${chip} -i ${delay} -U flash:w:${file}" >&2
		avrdude -v -c ${programmer} -p ${chip} -i ${delay} -U flash:w:${file}:i
	fi
elif [ ${cmd} == "upload" ]; then
	bootloader
	avrdude -v -c avr109 -p ${chip} -P ${port} -U flash:w:${file}:i
elif [ ${cmd} == "upload_dfu" ]; then
	bootloader
	sudo dfu-programmer atmega32u4 erase
	sudo dfu-programmer atmega32u4 flash ${file}
	reset
elif [ ${cmd} == "minicom" ]; then
	minicom -D ${port} -b ${baud}
elif [ ${cmd} == "screen" ]; then
	screen ${port} ${baud}
elif [ ${cmd} == "help" ]; then
	usage
elif [ ${cmd} == "show" ]; then
	show_readconfig
elif [ ${cmd} == 0 ]; then
	usage
	show_readconfig
else
	usage
fi
